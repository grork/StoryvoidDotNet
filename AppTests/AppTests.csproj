<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net6.0-windows10.0.22000.0</TargetFramework>
    <TargetPlatformMinVersion>10.0.17763.0</TargetPlatformMinVersion>
    <RootNamespace>Codevoid.Test.Storyvoid</RootNamespace>
    <ApplicationManifest>app.manifest</ApplicationManifest>
    <Platforms>x86;x64;arm64</Platforms>
    <RuntimeIdentifiers>win10-x86;win10-x64;win10-arm64</RuntimeIdentifiers>
    <PublishProfile>win10-$(Platform).pubxml</PublishProfile>
    <UseWinUI>true</UseWinUI>
    <EnableMsixTooling>true</EnableMsixTooling>
    <SupportedOSPlatformVersion>10.0.22000.0</SupportedOSPlatformVersion>
    <AssemblyName>StoryvoidTests</AssemblyName>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <ProduceReferenceAssembly>False</ProduceReferenceAssembly>
    <TreatWarningsAsErrors>True</TreatWarningsAsErrors>
    
    <!--
    Enable the WinApps SDK unit test stuff to work. See
    https://github.com/microsoft/testfx/issues/1127 for more details
    -->
    <WindowsAppContainer>True</WindowsAppContainer>
    <EnablePreviewMsixTooling>true</EnablePreviewMsixTooling>
    
    <!--
    To help prevent a clash with the project reference to the app, we want
    to rename the default app XAML file. Except this is implicitly imported
    by the SDK targets files. So, we need to disable that. See further down
    for the ApplicationDefinition that pulls things in correctly
    -->
    <EnableDefaultApplicationDefinition>false</EnableDefaultApplicationDefinition>

    <!--
    Referencing another WinUI app as a project dependency will merge in the
    resources from that dependency. Since the resource merging requires the
    resources to be uniquely named this causes a problem when you merge them.
    
    So, rather than making the app the odd duck, lets just rename the file used
    here.
    -->
    <ProjectPriFileName>TestResources.pri</ProjectPriFileName>
  </PropertyGroup>

  <ItemGroup>
    <Using Include="Microsoft.UI.Xaml" />
    <Using Include="Microsoft.UI.Xaml.Controls" />
    <Using Include="Microsoft.VisualStudio.TestTools.UnitTesting" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="Assets\SplashScreen.scale-200.png" />
    <Content Include="Assets\LockScreenLogo.scale-200.png" />
    <Content Include="Assets\Square150x150Logo.scale-200.png" />
    <Content Include="Assets\Square44x44Logo.scale-200.png" />
    <Content Include="Assets\Square44x44Logo.targetsize-24_altform-unplated.png" />
    <Content Include="Assets\StoreLogo.png" />
    <Content Include="Assets\Wide310x150Logo.scale-200.png" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.WindowsAppSDK" Version="1.1.5" />
    <PackageReference Include="Microsoft.Windows.SDK.BuildTools" Version="10.0.22621.755" />
    <Manifest Include="$(ApplicationManifest)" />

    <PackageReference Include="MSTest.TestAdapter" Version="2.2.10" />
    <PackageReference Include="MSTest.TestFramework" Version="2.2.10" />
    <PackageReference Include="Microsoft.TestPlatform.TestHost" Version="17.4.0">
      <ExcludeAssets>build</ExcludeAssets>
    </PackageReference>
  </ItemGroup>

  <!-- 
    Defining the "Msix" ProjectCapability here allows the Single-project MSIX Packaging
    Tools extension to be activated for this project even if the Windows App SDK Nuget
    package has not yet been restored.
  -->
  <ItemGroup Condition="'$(DisableMsixProjectCapabilityAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
    <ProjectCapability Include="Msix" />
  </ItemGroup>

  <ItemGroup>
    <ProjectCapability Include="TestContainer" />
  </ItemGroup>

  <ItemGroup>
    <Page Remove="TestApp.xaml" />
    <ApplicationDefinition Include="TestApp.xaml">
      <Generator>MSBuild:Compile</Generator>
      <XamlRuntime>$(DefaultXamlRuntime)</XamlRuntime>
    </ApplicationDefinition>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\App\App.csproj" />
  </ItemGroup>
</Project>
